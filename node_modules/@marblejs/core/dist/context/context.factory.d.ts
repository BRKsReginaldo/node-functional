import * as R from 'fp-ts/lib/Reader';
import { Option } from 'fp-ts/lib/Option';
import { ContextToken } from './context.token.factory';
export interface Context extends Map<ContextToken, R.Reader<any, any> | any> {
}
export interface ContextProvider {
    <T>(token: ContextToken<T>): Option<T>;
}
export interface ContextReader extends R.Reader<Context, any> {
}
export interface ContextEagerReader {
    (ctx: Context): any;
}
export declare type ContextDependency = ContextReader | ContextEagerReader;
export interface BoundDependency<T, U extends ContextDependency = ContextDependency> {
    token: ContextToken<T>;
    dependency: U;
}
export declare const createContext: () => Map<never, never>;
export declare const register: <T>(boundDependency: BoundDependency<T, any>) => (context: Context) => Map<ContextToken<any>, any>;
export declare const registerAll: (boundDependencies: BoundDependency<any, any>[]) => (context: Context) => Context;
export declare const lookup: (context: Context) => <T>(token: ContextToken<T>) => Option<T>;
export declare const bindTo: <T>(token: ContextToken<T>) => <U extends ContextDependency>(dependency: U) => BoundDependency<T, U>;
export declare const reader: R.Reader<Context, <T>(token: ContextToken<T>) => Option<T>>;
