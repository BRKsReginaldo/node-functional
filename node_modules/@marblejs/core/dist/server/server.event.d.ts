/// <reference types="node" />
import * as http from 'http';
import * as net from 'net';
import { EventsUnion, Event } from '../event/event.interface';
export declare enum ServerEventType {
    CONNECT = "connect",
    CONNECTION = "connection",
    CLIENT_ERROR = "clientError",
    CLOSE = "close",
    CHECK_CONTINUE = "checkContinue",
    CHECK_EXPECTATION = "checkExpectation",
    ERROR = "error",
    REQUEST = "request",
    UPGRADE = "upgrade",
    LISTENING = "listening"
}
export declare const ServerEvent: {
    connect: {
        type: ServerEventType.CONNECT;
    } & ((arg1: http.IncomingMessage, arg2: net.Socket, arg3: Buffer) => {
        type: ServerEventType.CONNECT;
        payload: {
            request: http.IncomingMessage;
            socket: net.Socket;
            head: Buffer;
        };
    });
    connection: {
        type: ServerEventType.CONNECTION;
    } & ((arg1: net.Socket) => {
        type: ServerEventType.CONNECTION;
        payload: {
            socket: net.Socket;
        };
    });
    clientError: {
        type: ServerEventType.CLIENT_ERROR;
    } & ((arg1: Error, arg2: net.Socket) => {
        type: ServerEventType.CLIENT_ERROR;
        payload: {
            error: Error;
            socket: net.Socket;
        };
    });
    close: {
        type: ServerEventType.CLOSE;
    } & (() => {
        type: ServerEventType.CLOSE;
        payload: {};
    });
    checkContinue: {
        type: ServerEventType.CHECK_CONTINUE;
    } & ((arg1: http.IncomingMessage, arg2: http.ServerResponse) => {
        type: ServerEventType.CHECK_CONTINUE;
        payload: {
            request: http.IncomingMessage;
            response: http.ServerResponse;
        };
    });
    checkExpectation: {
        type: ServerEventType.CHECK_EXPECTATION;
    } & ((arg1: http.IncomingMessage, arg2: http.ServerResponse) => {
        type: ServerEventType.CHECK_EXPECTATION;
        payload: {
            request: http.IncomingMessage;
            response: http.ServerResponse;
        };
    });
    error: {
        type: ServerEventType.ERROR;
    } & ((arg1: Error) => {
        type: ServerEventType.ERROR;
        payload: {
            error: Error;
        };
    });
    request: {
        type: ServerEventType.REQUEST;
    } & ((arg1: http.IncomingMessage, arg2: http.ServerResponse) => {
        type: ServerEventType.REQUEST;
        payload: {
            request: http.IncomingMessage;
            response: http.ServerResponse;
        };
    });
    upgrade: {
        type: ServerEventType.UPGRADE;
    } & ((arg1: http.IncomingMessage, arg2: net.Socket, arg3: Buffer) => {
        type: ServerEventType.UPGRADE;
        payload: {
            request: http.IncomingMessage;
            socket: net.Socket;
            head: Buffer;
        };
    });
    listening: {
        type: ServerEventType.LISTENING;
    } & ((arg1: number, arg2: string) => {
        type: ServerEventType.LISTENING;
        payload: {
            port: number;
            host: string;
        };
    });
};
export declare type AllServerEvents = EventsUnion<typeof ServerEvent>;
export declare function isConnectEvent(event: Event): event is ReturnType<typeof ServerEvent.connect>;
export declare function isConnectionEvent(event: Event): event is ReturnType<typeof ServerEvent.connection>;
export declare function isClientErrorEvent(event: Event): event is ReturnType<typeof ServerEvent.clientError>;
export declare function isCloseEvent(event: Event): event is ReturnType<typeof ServerEvent.close>;
export declare function isCheckContinueEvent(event: Event): event is ReturnType<typeof ServerEvent.checkContinue>;
export declare function isCheckExpectationEvent(event: Event): event is ReturnType<typeof ServerEvent.checkExpectation>;
export declare function isListeningEvent(event: Event): event is ReturnType<typeof ServerEvent.listening>;
export declare function isUpgradeEvent(event: Event): event is ReturnType<typeof ServerEvent.upgrade>;
export declare function isErrorEvent(event: Event): event is ReturnType<typeof ServerEvent.error>;
export declare function isRequestEvent(event: Event): event is ReturnType<typeof ServerEvent.request>;
