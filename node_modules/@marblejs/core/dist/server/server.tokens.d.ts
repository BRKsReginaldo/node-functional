/// <reference types="node" />
import { Observable } from 'rxjs';
export declare const serverEvent$: {
    _id: string;
    _T: Observable<{
        type: import("./server.event").ServerEventType.CONNECT;
        payload: {
            request: import("http").IncomingMessage;
            socket: import("net").Socket;
            head: Buffer;
        };
    } | {
        type: import("./server.event").ServerEventType.CONNECTION;
        payload: {
            socket: import("net").Socket;
        };
    } | {
        type: import("./server.event").ServerEventType.CLIENT_ERROR;
        payload: {
            error: Error;
            socket: import("net").Socket;
        };
    } | {
        type: import("./server.event").ServerEventType.CLOSE;
        payload: {};
    } | {
        type: import("./server.event").ServerEventType.CHECK_CONTINUE;
        payload: {
            request: import("http").IncomingMessage;
            response: import("http").ServerResponse;
        };
    } | {
        type: import("./server.event").ServerEventType.CHECK_EXPECTATION;
        payload: {
            request: import("http").IncomingMessage;
            response: import("http").ServerResponse;
        };
    } | {
        type: import("./server.event").ServerEventType.ERROR;
        payload: {
            error: Error;
        };
    } | {
        type: import("./server.event").ServerEventType.REQUEST;
        payload: {
            request: import("http").IncomingMessage;
            response: import("http").ServerResponse;
        };
    } | {
        type: import("./server.event").ServerEventType.UPGRADE;
        payload: {
            request: import("http").IncomingMessage;
            socket: import("net").Socket;
            head: Buffer;
        };
    } | {
        type: import("./server.event").ServerEventType.LISTENING;
        payload: {
            port: number;
            host: string;
        };
    }>;
};
