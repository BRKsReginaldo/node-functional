/// <reference types="node" />
import * as http from 'http';
import * as https from 'https';
import * as net from 'net';
import { Subject } from 'rxjs';
import { ServerEventType } from './server.event';
export declare const subscribeServerEvents: (hostname: string) => (event$: Subject<{
    type: ServerEventType.CONNECT;
    payload: {
        request: http.IncomingMessage;
        socket: net.Socket;
        head: Buffer;
    };
} | {
    type: ServerEventType.CONNECTION;
    payload: {
        socket: net.Socket;
    };
} | {
    type: ServerEventType.CLIENT_ERROR;
    payload: {
        error: Error;
        socket: net.Socket;
    };
} | {
    type: ServerEventType.CLOSE;
    payload: {};
} | {
    type: ServerEventType.CHECK_CONTINUE;
    payload: {
        request: http.IncomingMessage;
        response: http.ServerResponse;
    };
} | {
    type: ServerEventType.CHECK_EXPECTATION;
    payload: {
        request: http.IncomingMessage;
        response: http.ServerResponse;
    };
} | {
    type: ServerEventType.ERROR;
    payload: {
        error: Error;
    };
} | {
    type: ServerEventType.REQUEST;
    payload: {
        request: http.IncomingMessage;
        response: http.ServerResponse;
    };
} | {
    type: ServerEventType.UPGRADE;
    payload: {
        request: http.IncomingMessage;
        socket: net.Socket;
        head: Buffer;
    };
} | {
    type: ServerEventType.LISTENING;
    payload: {
        port: number;
        host: string;
    };
}>) => (httpServer: http.Server | https.Server) => void;
