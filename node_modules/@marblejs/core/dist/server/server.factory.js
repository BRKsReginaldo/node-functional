"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const http = require("http");
const https = require("https");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const server_event_1 = require("./server.event");
const server_event_subscriber_1 = require("./server.event.subscriber");
const context_factory_1 = require("../context/context.factory");
const effectsMetadata_factory_1 = require("../effects/effectsMetadata.factory");
const server_tokens_1 = require("./server.tokens");
const DEFAULT_HOSTNAME = '127.0.0.1';
exports.createServer = (config) => {
    const { httpListener, event$, port, hostname, dependencies = [], options = {} } = config;
    const serverEventSubject = new rxjs_1.Subject();
    const boundServerEvent$ = context_factory_1.bindTo(server_tokens_1.serverEvent$)(() => serverEventSubject.asObservable());
    const context = context_factory_1.registerAll([boundServerEvent$, ...dependencies])(context_factory_1.createContext());
    const httpListenerWithContext = httpListener.run(context);
    const server = options.httpsOptions
        ? https.createServer(options.httpsOptions, httpListenerWithContext)
        : http.createServer(httpListenerWithContext);
    server_event_subscriber_1.subscribeServerEvents(hostname || DEFAULT_HOSTNAME)(serverEventSubject)(server);
    if (event$) {
        const metadata = effectsMetadata_factory_1.createEffectMetadata({ ask: context_factory_1.lookup(context) });
        event$(serverEventSubject.pipe(operators_1.takeWhile(e => !server_event_1.isCloseEvent(e))), server, metadata).subscribe();
    }
    return {
        run: (predicate = true) => predicate
            ? server.listen(port, hostname)
            : server,
        server,
        info: {
            routing: httpListenerWithContext.config.routing,
        },
    };
};
