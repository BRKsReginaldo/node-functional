"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const server_event_1 = require("./server.event");
exports.subscribeServerEvents = (hostname) => (event$) => (httpServer) => {
    httpServer.on(server_event_1.ServerEventType.CONNECT, (req, socket, head) => event$.next(server_event_1.ServerEvent.connect(req, socket, head)));
    httpServer.on(server_event_1.ServerEventType.CONNECTION, (socket) => event$.next(server_event_1.ServerEvent.connection(socket)));
    httpServer.on(server_event_1.ServerEventType.CLIENT_ERROR, (error, socket) => event$.next(server_event_1.ServerEvent.clientError(error, socket)));
    httpServer.on(server_event_1.ServerEventType.CLOSE, () => event$.next(server_event_1.ServerEvent.close()));
    httpServer.on(server_event_1.ServerEventType.CHECK_CONTINUE, (req, res) => event$.next(server_event_1.ServerEvent.checkContinue(req, res)));
    httpServer.on(server_event_1.ServerEventType.CHECK_EXPECTATION, (req, res) => event$.next(server_event_1.ServerEvent.checkExpectation(req, res)));
    httpServer.on(server_event_1.ServerEventType.ERROR, (error) => event$.next(server_event_1.ServerEvent.error(error)));
    httpServer.on(server_event_1.ServerEventType.REQUEST, (req, res) => event$.next(server_event_1.ServerEvent.request(req, res)));
    httpServer.on(server_event_1.ServerEventType.UPGRADE, (req, socket, head) => event$.next(server_event_1.ServerEvent.upgrade(req, socket, head)));
    httpServer.on(server_event_1.ServerEventType.LISTENING, () => {
        const serverAddressInfo = httpServer.address();
        event$.next(server_event_1.ServerEvent.listening(serverAddressInfo.port, hostname));
    });
};
