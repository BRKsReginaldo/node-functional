/// <reference types="node" />
import { IncomingMessage, OutgoingMessage } from 'http';
import { HttpMiddlewareEffect, HttpErrorEffect, HttpOutputEffect } from '../effects/http-effects.interface';
import { RouteEffect, RouteEffectGroup } from '../router/router.interface';
import { Context } from '../context/context.factory';
export interface HttpListenerConfig {
    middlewares?: HttpMiddlewareEffect[];
    effects: (RouteEffect | RouteEffectGroup)[];
    error$?: HttpErrorEffect;
    output$?: HttpOutputEffect;
}
export declare const httpListener: ({ middlewares, effects, error$, output$, }: HttpListenerConfig) => import("fp-ts/lib/Reader").Reader<Context, {
    (req: IncomingMessage, res: OutgoingMessage): void;
    config: {
        routing: import("../router/router.interface").RoutingItem[];
    };
}>;
