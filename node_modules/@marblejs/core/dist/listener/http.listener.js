"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Reader_1 = require("fp-ts/lib/Reader");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const effects_combiner_1 = require("../effects/effects.combiner");
const http_interface_1 = require("../http.interface");
const response_handler_1 = require("../response/response.handler");
const router_resolver_1 = require("../router/router.resolver");
const router_factory_1 = require("../router/router.factory");
const error_effect_1 = require("../error/error.effect");
const context_factory_1 = require("../context/context.factory");
const effectsMetadata_factory_1 = require("../effects/effectsMetadata.factory");
exports.httpListener = ({ middlewares = [], effects, error$ = error_effect_1.defaultError$, output$ = out$ => out$, }) => Reader_1.ask().map(ctx => {
    const requestSubject$ = new rxjs_1.Subject();
    const combinedMiddlewares = effects_combiner_1.combineMiddlewares(...middlewares);
    const routing = router_factory_1.factorizeRouting(effects);
    const defaultMetadata = effectsMetadata_factory_1.createEffectMetadata({ ask: context_factory_1.lookup(ctx) });
    const defaultResponse = { status: http_interface_1.HttpStatus.NOT_FOUND };
    requestSubject$.pipe(operators_1.tap(({ req, res }) => res.send = response_handler_1.handleResponse(res)(req)), operators_1.mergeMap(({ req, res }) => combinedMiddlewares(rxjs_1.of(req), res, defaultMetadata).pipe(operators_1.takeWhile(() => !res.finished), operators_1.mergeMap(router_resolver_1.resolveRouting(routing, defaultMetadata)(res)), operators_1.defaultIfEmpty(defaultResponse), operators_1.mergeMap(out => output$(rxjs_1.of(out), res, effectsMetadata_factory_1.createEffectMetadata(Object.assign({}, defaultMetadata, { initiator: req })))), operators_1.tap(res.send), operators_1.catchError(error => error$(rxjs_1.of(req), res, effectsMetadata_factory_1.createEffectMetadata(Object.assign({}, defaultMetadata, { error }))).pipe(operators_1.mergeMap(out => output$(rxjs_1.of(out), res, effectsMetadata_factory_1.createEffectMetadata(Object.assign({}, defaultMetadata, { error })))), operators_1.tap(res.send)))))).subscribe();
    const httpServer = (req, res) => requestSubject$.next({
        req: req,
        res: res,
    });
    httpServer.config = { routing };
    return httpServer;
});
