"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const router_query_factory_1 = require("./router.query.factory");
exports.findRoute = (routing, url, method) => {
    for (let i = 0; i < routing.length; ++i) {
        const { regExp, methods, path } = routing[i];
        const match = url.match(regExp);
        if (!match) {
            continue;
        }
        const routingMethod = methods[method] || methods['*'];
        if (!routingMethod) {
            continue;
        }
        const { parameters, effect, middleware } = routingMethod;
        const params = {};
        if (parameters) {
            for (let p = 0; p < parameters.length; p++) {
                params[parameters[p]] = decodeURIComponent(match[p + 1]);
            }
        }
        return { middleware, effect, params, path };
    }
    return undefined;
};
exports.resolveRouting = (routing, metadata) => (res) => (req) => {
    if (res.finished) {
        return rxjs_1.EMPTY;
    }
    req.meta = {};
    const [urlPath, urlQuery] = req.url.split('?');
    const preparedUrlPath = (urlPath + '/').replace(/\/\/+/g, '/');
    const routeMatched = exports.findRoute(routing, preparedUrlPath, req.method);
    if (!routeMatched) {
        return rxjs_1.EMPTY;
    }
    req.query = router_query_factory_1.queryParamsFactory(urlQuery);
    req.params = routeMatched.params;
    req.meta.path = routeMatched.path;
    const middleware = routeMatched.middleware;
    return middleware
        ? middleware(rxjs_1.of(req), res, metadata).pipe(operators_1.takeWhile(() => !res.finished), operators_1.mergeMap(req => routeMatched.effect(rxjs_1.of(req), res, metadata)))
        : routeMatched.effect(rxjs_1.of(req), res, metadata);
};
