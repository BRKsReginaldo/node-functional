"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const effects_combiner_1 = require("../effects/effects.combiner");
const router_helpers_1 = require("./router.helpers");
const router_params_factory_1 = require("./router.params.factory");
exports.factorizeRouting = (routes, middlewares = [], parentPath = '') => {
    const routing = [];
    routes.forEach(route => {
        const concatenatedPath = parentPath + '/' + route.path;
        if (router_helpers_1.isRouteEffectGroup(route)) {
            return routing.push(...exports.factorizeRouting(route.effects, [...middlewares, ...route.middlewares], concatenatedPath));
        }
        const { regExp, parameters, path } = router_params_factory_1.factorizeRegExpWithParams(concatenatedPath);
        const foundRoute = routing.find(route => route.regExp.source === regExp.source);
        const method = {
            effect: route.effect,
            middleware: middlewares.length
                ? effects_combiner_1.combineMiddlewares(...middlewares)
                : route.middleware,
            parameters,
        };
        if (foundRoute) {
            if (foundRoute.methods[route.method]) {
                throw new Error(`Redefinition of route at "${route.method}: ${parentPath + route.path}"`);
            }
            return foundRoute.methods[route.method] = method;
        }
        return routing.push({
            path,
            regExp,
            methods: { [route.method]: method },
        });
    });
    return routing;
};
