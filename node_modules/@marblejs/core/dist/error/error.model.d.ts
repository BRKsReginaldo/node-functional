/// <reference types="node" />
import { Event } from '../event/event.interface';
import { HttpStatus } from '../http.interface';
import { ExtendableError } from '../+internal/utils';
export declare enum ErrorType {
    CORE_ERROR = "CoreError",
    HTTP_ERROR = "HttpError",
    EVENT_ERROR = "EventError"
}
export declare class HttpError extends ExtendableError {
    readonly message: string;
    readonly status: HttpStatus;
    readonly data?: object | undefined;
    readonly context?: string | undefined;
    constructor(message: string, status: HttpStatus, data?: object | undefined, context?: string | undefined);
}
export declare class CoreError extends ExtendableError {
    readonly message: string;
    constructor(message: string, options: {
        stackTraceFactory: (message: string, stack: NodeJS.CallSite[]) => string;
        context: any;
    });
}
export declare class EventError extends ExtendableError {
    readonly event: Event;
    readonly message: string;
    readonly data?: object | undefined;
    constructor(event: Event, message: string, data?: object | undefined);
}
export declare const isHttpError: (error: Error) => error is HttpError;
export declare const isCoreError: (error: Error) => error is CoreError;
export declare const isEventError: (error: Error) => error is EventError;
