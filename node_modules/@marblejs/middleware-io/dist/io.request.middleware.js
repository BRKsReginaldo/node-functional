"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@marblejs/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const io_middleware_1 = require("./io.middleware");
const testing_1 = require("@marblejs/core/dist/+internal/testing");
const io_json_schema_1 = require("./io.json-schema");
var Context;
(function (Context) {
    Context["BODY"] = "body";
    Context["PARAMS"] = "params";
    Context["QUERY"] = "query";
    Context["HEADERS"] = "headers";
})(Context || (Context = {}));
exports.requestValidator$ = (schema, options = {}) => {
    const bodyValidator$ = io_middleware_1.validator$(schema.body, Object.assign({}, options, { context: Context.BODY }));
    const paramsValidator$ = io_middleware_1.validator$(schema.params, Object.assign({}, options, { context: Context.PARAMS }));
    const queryValidator$ = io_middleware_1.validator$(schema.query, Object.assign({}, options, { context: Context.QUERY }));
    const headersValidator$ = io_middleware_1.validator$(schema.headers, Object.assign({}, options, { context: Context.HEADERS }));
    const addMetadata = (req, name) => {
        req.meta = Object.assign({}, req.meta, { [name]: io_json_schema_1.mergeJsonObjects(req.meta && req.meta[name], io_json_schema_1.ioTypeToJsonSchema(schema[name])) });
    };
    return (req$) => req$.pipe(operators_1.tap(req => {
        if (testing_1.isTestingMetadataOn()) {
            addMetadata(req, 'body');
            addMetadata(req, 'params');
            addMetadata(req, 'query');
            addMetadata(req, 'headers');
        }
    }), operators_1.mergeMap(req => rxjs_1.forkJoin(bodyValidator$(rxjs_1.of(req.body)), paramsValidator$(rxjs_1.of(req.params)), queryValidator$(rxjs_1.of(req.query)), headersValidator$(rxjs_1.of(req.headers))).pipe(operators_1.map(([body, params, query]) => {
        req.body = body;
        req.params = params;
        req.query = query;
        return req;
    }), operators_1.catchError((error) => rxjs_1.throwError(new core_1.HttpError(error.message, core_1.HttpStatus.BAD_REQUEST, error.data, error.context))))));
};
