import * as t from 'io-ts';
import { JSONSchema7 } from 'json-schema';
declare enum IoTag {
    BOOLEAN = "BooleanType",
    NUMBER = "NumberType",
    STRING = "StringType",
    UNDEFINED = "UndefinedType",
    NULL = "NullType",
    LITERAL = "LiteralType",
    UNION = "UnionType",
    KEYOF = "KeyofType",
    INTERSECTION = "IntersectionType",
    ARRAY = "ArrayType",
    TUPLE = "TupleType",
    INTERFACE = "InterfaceType",
    PARTIAL = "PartialType",
    EXACT = "ExactType",
    DICTIONARY = "DictionaryType",
    REFINEMENT = "RefinementType",
    CUSTOM_JSON_SCHEMA = "CustomJsonSchemaType"
}
declare type IoConverter = (type: any, supertypes: any[]) => any;
interface CustomJsonSchemaType<A, O = A, I = unknown> extends t.Type<A, O, I> {
    _tag: IoTag.CUSTOM_JSON_SCHEMA;
    jsonSchema: JSONSchema7;
}
export declare const getTag: (ioType: t.Any) => IoTag;
export declare const getIoConverter: (tag: IoTag) => IoConverter;
export declare const mergeJsonObjects: (...schemas: (JSONSchema7 | undefined)[]) => JSONSchema7 | undefined;
export declare const ioTypeToJsonSchema: (ioType: t.Any | undefined) => JSONSchema7 | undefined;
export declare const withJsonSchema: <A, O = A, I = unknown>(ioType: t.Type<A, O, I>, jsonSchema: JSONSchema7) => CustomJsonSchemaType<A, O, I>;
export {};
